from aiogram import Router
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from typing import Callable, Dict
import hashlib
import html
import re

router = Router()

HELP_TEXT = (
    "–ë–æ—Ç –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç RSS –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –º–µ–¥–∏–∞, —Ö—Ä–∞–Ω–∏—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤ SQLite –∏ –¥–∞—ë—Ç –ø–æ–∏—Å–∫ (FTS / –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã).\n\n"
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "/start ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
    "/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
    "/latest ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –Ω–æ–≤–æ—Å—Ç–µ–π (—Å–ø–∏—Å–∫–æ–º)\n"
    "/news [N] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—É—é). N ‚Äî –Ω–æ–º–µ—Ä (1-based)\n"
    "/filter &lt;–∑–∞–ø—Ä–æ—Å&gt; ‚Äî –ø–æ–∏—Å–∫ (AND OR NOT, + - |, \"—Ñ—Ä–∞–∑—ã\"; –ø—Ä–æ–±–µ–ª = AND)\n"
    "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º\n"
    "/fetch ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä (–∞–¥–º–∏–Ω)\n\n"
    "–ù–∞–≤–∏–≥–∞—Ü–∏—è:\n"
    "- –í —Å–ø–∏—Å–∫–∞—Ö: ¬´–ü—Ä–µ–¥¬ª / ¬´–°–ª–µ–¥¬ª / ¬´–ó–∞–∫—Ä—ã—Ç—å¬ª\n"
    "- –í –æ–¥–∏–Ω–æ—á–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ (/news): ¬´‚èÆ –ü–µ—Ä–≤.¬ª ¬´¬´ –ü—Ä–µ–¥¬ª ¬´–°–ª–µ–¥ ¬ª ¬´–ü–æ—Å–ª. ‚è≠¬ª + ¬´‚úñ –ó–∞–∫—Ä—ã—Ç—å¬ª.\n"
    "–°–∫–æ–±–∫–∏ ( ) –≤ –ø–æ–∏—Å–∫–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ FTS5)."
)

# ----- CallbackData -----

class LatestPage(CallbackData, prefix="lp"):
    offset: int
    limit: int

class FilterPage(CallbackData, prefix="fs"):
    key: str
    offset: int
    limit: int

class NewsItem(CallbackData, prefix="ni"):
    idx: int

# ----- –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ / —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ -----

TAG_RE = re.compile(r"<[^>]+>")
BRACKET_ENTITY_RE = re.compile(r"\[&#\d+;?\]")        # –ø—Ä–∏–º–µ—Ä: [&#8230;]
MULTISPACE_RE = re.compile(r"[ \t\r\f\v]+")
NEWLINE_RE = re.compile(r"\n{3,}")
NBSP_RE = re.compile(r"\u00A0")

def clean_text(raw: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π HTML-—Ñ—Ä–∞–≥–º–µ–Ω—Ç (–∑–∞–≥–æ–ª–æ–≤–æ–∫ / summary) –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É:
      1. html.unescape ‚Äî –¥–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ (&amp; -> &)
      2. –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é.
      3. –ó–∞–º–µ–Ω—è–µ–º [&#8230;] –∏ –ø–æ–¥–æ–±–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ.
      4. –ü—Ä–∏–≤–æ–¥–∏–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∫ –æ–¥–Ω–æ–º—É, —É–±–∏—Ä–∞–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã.
      5. –ü–æ–¥—Ä–µ–∑–∞–µ–º –∫—Ä–∞—è.
      6. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è HTML (parse_mode=HTML).
    """
    if not raw:
        return ""
    # –î–µ–∫–æ–¥ —Å—É—â–Ω–æ—Å—Ç–µ–π
    txt = html.unescape(raw)
    # –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏
    txt = TAG_RE.sub("", txt)
    # –£–¥–∞–ª—è–µ–º JS/CSS –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã (–ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ)
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    # –ó–∞–º–µ–Ω—è–µ–º [&#8230;] –Ω–∞ ‚Ä¶
    txt = BRACKET_ENTITY_RE.sub("‚Ä¶", txt)
    # –ù–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã -> –æ–±—ã—á–Ω—ã–µ
    txt = NBSP_RE.sub(" ", txt)
    # –ú–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–æ–≤ -> –æ–¥–∏–Ω
    txt = MULTISPACE_RE.sub(" ", txt)
    # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–¥—Ä—è–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–æ–∫ -> –º–∞–∫—Å–∏–º—É–º –¥–≤–∞
    txt = NEWLINE_RE.sub("\n\n", txt)
    txt = txt.strip()
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    return html.escape(txt)

def safe_join(parts):
    return "\n\n".join(p for p in parts if p)

# ----- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ -----

def format_item_line(item: dict, idx: int) -> str:
    title = clean_text(item.get('title') or "")
    source = clean_text(item.get('source') or "")
    published = clean_text(item.get('published') or "")
    line = f"{idx}. [{source}] {title}"
    if published:
        line += f"\n{published}"
    return line

def build_page_text(items: list, offset: int, limit: int, total: int, header: str) -> str:
    header = clean_text(header)
    if not items:
        if total == 0:
            return f"{header}\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
        return f"{header}\n–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞."
    lines = [f"{header}\n–ü–æ–∑–∏—Ü–∏–∏ {offset+1}‚Äì{offset+len(items)} –∏–∑ {total}"]
    for i, it in enumerate(items, start=1):
        lines.append(format_item_line(it, offset + i))
    return "\n\n".join(lines)

def build_news_keyboard(items: list, offset: int, limit: int, total: int):
    buttons = []
    for i, it in enumerate(items, start=1):
        buttons.append([InlineKeyboardButton(text=f"üîó {offset + i}", url=it["link"])])
    has_prev = offset > 0
    has_next = (offset + limit) < total
    nav_row = []
    if has_prev:
        nav_row.append(
            InlineKeyboardButton(
                text="¬´ –ü—Ä–µ–¥",
                callback_data=LatestPage(offset=max(0, offset - limit), limit=limit).pack(),
            )
        )
    if has_next:
        nav_row.append(
            InlineKeyboardButton(
                text="–°–ª–µ–¥ ¬ª",
                callback_data=LatestPage(offset=offset + limit, limit=limit).pack(),
            )
        )
    if nav_row:
        buttons.append(nav_row)
    buttons.append([InlineKeyboardButton(text="‚úñ –ó–∞–∫—Ä—ã—Ç—å", callback_data="lp:close")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def build_search_keyboard(items: list, key: str, offset: int, limit: int, total: int):
    buttons = []
    for i, it in enumerate(items, start=1):
        buttons.append([InlineKeyboardButton(text=f"üîó {offset + i}", url=it["link"])])
    has_prev = offset > 0
    has_next = (offset + limit) < total
    nav_row = []
    if has_prev:
        nav_row.append(
            InlineKeyboardButton(
                text="¬´ –ü—Ä–µ–¥",
                callback_data=FilterPage(key=key, offset=max(0, offset - limit), limit=limit).pack(),
            )
        )
    if has_next:
        nav_row.append(
            InlineKeyboardButton(
                text="–°–ª–µ–¥ ¬ª",
                callback_data=FilterPage(key=key, offset=offset + limit, limit=limit).pack(),
            )
        )
    if nav_row:
        buttons.append(nav_row)
    buttons.append([InlineKeyboardButton(text="‚úñ –ó–∞–∫—Ä—ã—Ç—å", callback_data="fs:close")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ----- –û–¥–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å -----

def build_single_news_text(item: dict, idx: int, total: int) -> str:
    title = clean_text(item.get("title") or "")
    source = clean_text(item.get("source") or "")
    published = clean_text(item.get("published") or "")
    summary = clean_text(item.get("summary") or "")
    parts = [
        f"–ù–æ–≤–æ—Å—Ç—å {idx+1} –∏–∑ {total}",
        f"[{source}] {title}",
        published,
        summary
    ]
    return safe_join(parts)

def build_single_news_keyboard(item: dict, idx: int, total: int):
    buttons = []
    buttons.append([InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏", url=item["link"])])

    nav_rows = []

    left_row = []
    if idx > 0:
        left_row.append(
            InlineKeyboardButton(
                text="‚èÆ –ü–µ—Ä–≤.",
                callback_data=NewsItem(idx=0).pack()
            )
        )
        left_row.append(
            InlineKeyboardButton(
                text="¬´ –ü—Ä–µ–¥",
                callback_data=NewsItem(idx=idx - 1).pack()
            )
        )
    if left_row:
        nav_rows.append(left_row)

    right_row = []
    if idx < total - 1:
        right_row.append(
            InlineKeyboardButton(
                text="–°–ª–µ–¥ ¬ª",
                callback_data=NewsItem(idx=idx + 1).pack()
            )
        )
        right_row.append(
            InlineKeyboardButton(
                text="–ü–æ—Å–ª. ‚è≠",
                callback_data=NewsItem(idx=total - 1).pack()
            )
        )
    if right_row:
        nav_rows.append(right_row)

    buttons.extend(nav_rows)

    buttons.append([InlineKeyboardButton(text="‚úñ –ó–∞–∫—Ä—ã—Ç—å", callback_data="ni:close")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ----- Handlers -----

def setup_handlers(
    db,
    fetch_trigger: Callable,
    chat_id_admin: int | None = None,
    page_size: int = 10,
    search_page_size: int | None = None,
    latest_count: int | None = None,
):
    if search_page_size is None:
        search_page_size = page_size
    if latest_count is None:
        latest_count = page_size

    SEARCH_CACHE: Dict[str, str] = {}

    @router.message(Command("help"))
    @router.message(Command("start"))
    async def help_cmd(message: Message):
        await message.answer(HELP_TEXT)

    @router.message(Command("latest"))
    async def latest_cmd(message: Message):
        limit = max(1, latest_count)
        items = db.latest(limit)
        total = db.total()
        text = build_page_text(items, 0, limit, total, header=f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {limit} –Ω–æ–≤–æ—Å—Ç–µ–π")
        kb = build_news_keyboard(items, 0, limit, total)
        await message.answer(text, reply_markup=kb, disable_web_page_preview=True)

    @router.message(Command("news"))
    async def news_cmd(message: Message):
        """
        /news [N]
        N ‚Äî 1-based –ø–æ–∑–∏—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ (—Å–≤–µ–∂–∏–µ —Å–Ω–∞—á–∞–ª–∞). –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ = 1.
        """
        total = db.total()
        if total == 0:
            await message.answer("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.")
            return
        parts = message.text.split(maxsplit=1)
        if len(parts) > 1:
            try:
                idx_user = int(parts[1])
                idx = idx_user - 1
            except (ValueError, TypeError):
                idx = 0
        else:
            idx = 0
        if idx < 0:
            idx = 0
        if idx >= total:
            idx = total - 1
        items = db.latest_page(idx, 1)
        if not items:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
        item = items[0]
        text = build_single_news_text(item, idx, total)
        kb = build_single_news_keyboard(item, idx, total)
        await message.answer(text, reply_markup=kb, disable_web_page_preview=True)

    @router.message(Command("stats"))
    async def stats_cmd(message: Message):
        stats = db.count_by_source()
        total = db.total()
        lines = [f"–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total}"]
        for s in stats:
            lines.append(f"{clean_text(s['source'])}: {s['count']}")
        await message.answer("\n".join(lines))

    @router.message(Command("fetch"))
    async def fetch_cmd(message: Message):
        if chat_id_admin and message.from_user and message.from_user.id != chat_id_admin:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        await message.answer("–ó–∞–ø—É—Å–∫–∞—é —Å–±–æ—Ä...")
        added_map = await fetch_trigger()
        total_new = sum(added_map.values())
        if total_new == 0:
            await message.answer("–ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            lines = [f"–ù–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: {total_new}"]
            for k, v in added_map.items():
                if v:
                    lines.append(f"- {clean_text(k)}: {v}")
            await message.answer("\n".join(lines))

    @router.message(Command("filter"))
    async def filter_cmd(message: Message):
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2 or not parts[1].strip():
            await message.answer(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /filter &lt;–∑–∞–ø—Ä–æ—Å&gt;\n–ü—Ä–∏–º–µ—Ä: /filter –∫–æ—Ä—Ä—É–ø—Ü–∏—è OR –≤–∑—è—Ç–∫–∞ -\"—Å—Ç–∞—Ä–æ–µ –¥–µ–ª–æ\""
            )
            return
        raw_query = parts[1].strip()
        norm = raw_query.lower()
        key = hashlib.sha1(norm.encode("utf-8")).hexdigest()[:8]
        SEARCH_CACHE[key] = norm

        offset = 0
        limit = search_page_size
        rows, total = db.search(norm, limit, offset)
        header = f"–ü–æ–∏—Å–∫: ‚Äú{clean_text(raw_query)}‚Äù"
        text = build_page_text(rows, offset, limit, total, header=header)
        kb = build_search_keyboard(rows, key, offset, limit, total)
        await message.answer(text, reply_markup=kb, disable_web_page_preview=True)

    @router.callback_query()
    async def pagination_callback(cb: CallbackQuery):
        if not cb.data:
            return

        # –ó–∞–∫—Ä—ã—Ç–∏—è
        if cb.data in {"lp:close", "fs:close", "ni:close"}:
            try:
                await cb.message.edit_reply_markup(reply_markup=None)
            except Exception:
                pass
            await cb.answer("–ó–∞–∫—Ä—ã—Ç–æ")
            return

        # –°–ø–∏—Å–æ—á–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è (/latest)
        if cb.data.startswith("lp:"):
            try:
                data = LatestPage.unpack(cb.data)
            except Exception:
                await cb.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=False)
                return
            offset = data.offset
            limit = data.limit
            items = db.latest_page(offset, limit)
            total = db.total()
            text = build_page_text(items, offset, limit, total, header="–ù–æ–≤–æ—Å—Ç–∏")
            kb = build_news_keyboard(items, offset, limit, total)
            try:
                await cb.message.edit_text(text, reply_markup=kb, disable_web_page_preview=True)
            except Exception:
                await cb.message.answer(text, reply_markup=kb, disable_web_page_preview=True)
            await cb.answer()
            return

        # –ü–æ–∏—Å–∫
        if cb.data.startswith("fs:"):
            try:
                data = FilterPage.unpack(cb.data)
            except Exception:
                await cb.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=False)
                return
            key = data.key
            offset = data.offset
            limit = data.limit
            if key not in SEARCH_CACHE:
                await cb.answer("–°–µ—Å—Å–∏—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /filter.", show_alert=True)
                return
            norm = SEARCH_CACHE[key]
            rows, total = db.search(norm, limit, offset)
            header = f"–ü–æ–∏—Å–∫: ‚Äú{clean_text(norm)}‚Äù"
            text = build_page_text(rows, offset, limit, total, header=header)
            kb = build_search_keyboard(rows, key, offset, limit, total)
            try:
                await cb.message.edit_text(text, reply_markup=kb, disable_web_page_preview=True)
            except Exception:
                await cb.message.answer(text, reply_markup=kb, disable_web_page_preview=True)
            await cb.answer()
            return

        # –û–¥–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å (/news)
        if cb.data.startswith("ni:"):
            try:
                data = NewsItem.unpack(cb.data)
            except Exception:
                await cb.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=False)
                return
            idx = data.idx
            total = db.total()
            if total == 0:
                await cb.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=False)
                return
            if idx < 0:
                idx = 0
            if idx >= total:
                idx = total - 1
            items = db.latest_page(idx, 1)
            if not items:
                await cb.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=False)
                return
            item = items[0]
            text = build_single_news_text(item, idx, total)
            kb = build_single_news_keyboard(item, idx, total)
            try:
                await cb.message.edit_text(text, reply_markup=kb, disable_web_page_preview=True)
            except Exception:
                await cb.message.answer(text, reply_markup=kb, disable_web_page_preview=True)
            await cb.answer()
            return